{"version":3,"sources":["components/Modal/Modal.js","components/Day/Day.js","components/TaskList/TaskList.js","components/Calendar/Calendar.js","serviceWorker.js","index.js"],"names":["Modal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","save","bind","assertThisInitialized","cansel","remove","updateBlock","day","nameMonth","refs","textar","value","hideModal","deleteBlock","react_default","a","createElement","className","ref","defaultValue","onClick","React","Component","Day","state","showModal","setState","modal","components_Modal_Modal","key","item","addBlock","react","TaskList","children","Calendar","tasks","month","nowMonth","monthArr","monthName","taskList","getDatys","nextMonth","prevMonth","year","Date","getDate","console","log","arr","i","text","push","splice","components_TaskList_TaskList","index","_this2","map","components_Day_Day","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","components_Calendar_Calendar","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.765b4238.chunk.js","sourcesContent":["import React from 'react';\nimport './Modal.css';\n\nclass Modal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.save = this.save.bind(this);\n        this.cansel = this.cansel.bind(this);\n        this.remove = this.remove.bind(this);\n\n    }\n\n    save(){\n        this.props.updateBlock(this.props.day + this.props.nameMonth + '|Текст задачи: '+ this.refs.textar.value, this.props.day);\n        this.props.hideModal();\n    }\n\n    cansel(){\n        this.props.hideModal();\n    }\n\n    remove(){\n        this.props.deleteBlock (this.props.day);\n        this.props.hideModal();\n    }\n\n    render(){\n        return(\n            <div className=\"modal\">\n                <div>\n                    <p>Выбрано {this.props.day} {this.props.nameMonth}</p>\n                    <textarea ref=\"textar\" defaultValue='input some text...'></textarea>\n                    <p><button onClick={this.save} className=\"btn green\">Сохранить</button>\n                    <button onClick={this.cansel} className=\"btn red\">Отменить</button>\n                    <button onClick={this.remove} className=\"btn red\">Удалить</button></p>\n                </div>\n            </div>\n        );\n\n    }\n}\n\nexport default Modal;\n","import React, {Fragment} from 'react';\nimport Modal from '../Modal/Modal';\nimport './Day.css';\n\nclass Day extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {showModal: false};\n\n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n    }\n\n    showModal () {\n        this.setState({showModal: true});\n    }\n\n    hideModal () {\n        this.setState({showModal: false});\n    }\n\n\n\n    render() {\n        const modal = this.state.showModal ? (\n            <Modal\n                key={this.props.day}\n                day={this.props.day}\n                item={this.props.item}\n                addBlock={this.props.addBlock}\n                updateBlock={this.props.updateBlock}\n                deleteBlock={this.props.deleteBlock}\n                hideModal={this.hideModal}\n                nameMonth={this.props.nameMonth}\n            />\n        ) : null;\n        return (\n            <Fragment>\n                <button onClick={this.showModal} className=\"day\">\n                    {this.props.day}\n                </button>\n                {modal}\n            </Fragment>\n\n        );\n    }\n}\n\nexport default Day;\n","import React from 'react';\n\nclass TaskList extends React.Component {\n\n    render() {\n        return (\n            <div className=\"field\">\n              {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default TaskList;","import React from 'react';\nimport Day from '../Day/Day';\nimport TaskList from '../TaskList/TaskList';\nimport './Calendar.css';\n\nclass Calendar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tasks: [],\n            month: [],\n            nowMonth: 7,\n            monthArr: ['январь', 'февраль', 'март','апрель','май','июнь','июль','август','сентябрь','октябрь','ноябрь','декабрь' ],\n            monthName: [\"август\"],\n        \n        };\n\n        this.addBlock = this.addBlock.bind(this);\n        this.deleteBlock = this.deleteBlock.bind(this);\n        this.updateBlock = this.updateBlock.bind(this);\n        this.taskList = this.taskList.bind(this);\n        this.getDatys = this.getDatys.bind(this);\n        this.nextMonth = this.nextMonth.bind(this);\n        this.prevMonth = this.prevMonth.bind(this);\n    }\n\n    getDatys (month, year){\n        return new Date(year, month, 0).getDate();\n    }\n\n    componentDidMount() {\n        let getDatys = this.getDatys(this.state.nowMonth, 2019); console.log(getDatys);\n        var arr=[];\n        for(var i = 0; i < getDatys; i++){\n           arr[i]=i+1;\n        }\n        this.setState({month:arr});\n    }\n\n    addBlock (text){\n        let arr = this.state.tasks;\n        arr.push (text);\n        this.setState({tasks: arr});\n    }\n\n    deleteBlock (i){\n        let arr = this.state.tasks;\n        arr.splice(i, 1);\n        this.setState({tasks: arr});\n    }\n\n    updateBlock (text, i){\n        let arr = this.state.tasks;\n        arr[i] = text; \n        this.setState({tasks: arr}); \n    }\n\n    taskList (item, i) {\n        return (\n            <TaskList key={i} index={i}>\n                {item}\n            </TaskList>\n        );\n    }\n\n    nextMonth(){\n        let nowMonth = this.state.nowMonth;\n        this.setState({nowMonth:nowMonth+1});\n        let getDatys = this.getDatys(this.state.nowMonth, 2019);\n        var arr=[];\n        for(var i = 0; i < getDatys; i++){\n            arr[i]=i+1;\n         \n        }\n        this.setState({monthName: this.state.monthArr[nowMonth]});\n        this.setState({month:arr}); \n    }\n    prevMonth(){\n        let nowMonth = this.state.nowMonth;\n        this.setState({nowMonth:nowMonth-1});\n        let getDatys = this.getDatys(this.state.nowMonth, 2019);\n        var arr=[];\n        for(var i = 0; i < getDatys; i++){\n            arr[i]=i+1;\n        }\n        this.setState({monthName: this.state.monthArr[nowMonth]});\n        this.setState({month:arr});\n    }\n\n    render() {\n        return (\n            <div className=\"field\">\n                <div className=\"tasksList\">\n                    <p>Список задач:</p>\n                    {this.state.tasks.map(this.taskList)}\n                </div>\n                <div className=\"calendar\">\n                    <div>{this.state.monthName}</div>\n                    <div>\n                        <button onClick={this.prevMonth}>prev month</button>\n                        <button onClick={this.nextMonth}>next month</button>\n                    </div>\n                    {this.state.month.map( (i)=>\n                        <Day key={i} day={i} item={i}\n                               addBlock={this.addBlock}\n                               updateBlock={this.updateBlock}\n                               deleteBlock={this.deleteBlock}\n                               nameMonth={this.state.monthName}\n                        />)}\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Calendar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calendar from './components/Calendar/Calendar';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root');\nReactDOM.render(<Calendar/>, root);\n\nserviceWorker.unregister();"],"sourceRoot":""}